<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>LoveLotus</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://ldlovezyh.cn/"/>
  <updated>2018-07-22T15:29:43.050Z</updated>
  <id>http://ldlovezyh.cn/</id>
  
  <author>
    <name>DianL</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>以太坊账户地址与交易签名</title>
    <link href="http://ldlovezyh.cn/2018/07/22/%E4%BB%A5%E5%A4%AA%E5%9D%8A%E8%B4%A6%E6%88%B7%E5%9C%B0%E5%9D%80%E4%B8%8E%E4%BA%A4%E6%98%93%E7%AD%BE%E5%90%8D/"/>
    <id>http://ldlovezyh.cn/2018/07/22/以太坊账户地址与交易签名/</id>
    <published>2018-07-22T15:29:43.082Z</published>
    <updated>2018-07-22T15:29:43.050Z</updated>
    
    <content type="html"><![CDATA[<h1 id="以太坊账户地址"><a href="#以太坊账户地址" class="headerlink" title="以太坊账户地址"></a>以太坊账户地址</h1><p>以太坊有两种不同的账户类型:</p><div class="note info"><ol><li>合约账户。</li><li>外部账户EOA(Externally Owned Accounts)。</li></ol></div><p>合约账户对应1个智能合约的部署地址，该地址可以接受代币的转入，但是代币的转出则需要在合约中提供接口函数。</p><p>外部账户的所有权是由密钥来验证的。密钥由用户存储在文件或钱包中。</p><p>钱包中的密钥完全独立于以太坊协议，可由用户的钱包软件生成和管理而并不需要依照区块链或接入互联网。</p><p>账户中的密钥包含两部分：公钥和私钥,公钥可以暴露给其他人，而私钥只有账户的所有者才能管理，掌握了私钥就掌握了该账户的所有权，所以需要对私钥进行可靠的保密存储。</p><p>以太坊的交易支付中，接收方由一个以太坊地址表示，地址由账户的公钥生成。以太坊地址是用户能接触到的密钥的唯一表示。</p><hr><h2 id="椭圆曲线加密"><a href="#椭圆曲线加密" class="headerlink" title="椭圆曲线加密"></a>椭圆曲线加密</h2><p>公钥加密方案基于困难的数学难题，如著名的RSA加密算法是基于大整数的分解难题。</p><p>以太坊中使用的是椭圆曲线加密方案，它基于椭圆曲线上的离散对数问题,是一种公钥加密方案。</p><p>椭圆曲线上的所有点对加法作成一个循环群，在曲线上进行数乘运算是简单的，但它的逆运算则是困难的。</p><p>以太坊中选取椭圆曲线和比特币中的一样为secp256k1，实际上以太坊中调用的就是比特币的椭圆曲线加密库。</p><hr><h3 id="加密算法-ECDH"><a href="#加密算法-ECDH" class="headerlink" title="加密算法(ECDH)"></a>加密算法(ECDH)</h3><p>以太坊账户的私钥，由随机数生成器得到的256bit的随机数，随机算法是基于系统噪音设计的。</p><p>公钥是由椭圆曲线算法由私钥计算得到。但是由公钥是无法计算得到私钥，因此可用来作为账户地址。公钥数值上满足椭圆曲线方程，为512比特。</p><p>椭圆曲线密码加解密步骤：</p><div class="note info"><ol><li>私钥256比特随机数:：$sk\leftarrow [1,n-1]$。</li><li>公钥由私钥得到：$pk=sk*G$,$G$是椭圆曲线的基点。</li><li>加密步骤：选取随机数$r\leftarrow [1,n-1]$，设明文为$M$  由公钥得到密文$C_x=r\times G,C_y=M+r\times PK$密文为 $C=(C_x,C_y)$</li><li>解密步骤：密文由私钥解密：$M=C_y - sk\times C_x$</li></ol></div><hr><h3 id="数字签名算法-ECDSA"><a href="#数字签名算法-ECDSA" class="headerlink" title="数字签名算法(ECDSA)"></a>数字签名算法(ECDSA)</h3><p>以太坊中使用椭圆曲线数字签名算法(Elliptic Curve Digital Signature Algorithm,ECDSA),它有三个目的：</p><div class="note info"><ol><li>签名证明了私钥的持有者为帐户的所有者，表明以太币支出，或合约的执行是经过授权的。</li><li>证明了授权是不可抵赖的。</li><li>防止交易数据在交易完成后被篡改。</li></ol></div><p>数字签名的数学方案有两部分组成，分为签名部分，和签名的验证部分。</p><p>签名的过程：</p><div class="note info"><ol><li>设私钥为$sk$，公钥$PK=sk\times G$,$G$为椭圆曲线的基点，椭圆曲线的阶为$n$。</li><li>计算消息m的hash值$e=HASH(m)$,以太坊中哈希算法为Keacck256。</li><li>选取随机数$k\leftarrow[1,n-1]$，计算$M = k\times G$。</li><li>计算 $r=M_x\bmod n$,若$r=0$返回第三步</li><li>计算 $s=k^{-1}\times (z+r\times sk)\bmod n$,若$s=0$返回第三步。</li><li>$(r,s)$即为所得签名。</li></ol></div><p>签名的验证过程：</p><p>验证算法为签名算法的逆过程，若得到的结果满足椭圆曲线方程则验证通过。</p><div class="note info"><ol><li>验证签名(r,s)的有效性，计算得到消息的hash值$e=HASH(m)$。</li><li>计算参数：$w=s^{-1}\bmod n$。</li><li>计算$Q=e\times s^{-1}+r\times s^{-1}\times PK$若结果满足椭圆曲线方程验证成功。</li><li>$r=Q_x$则签名有效。</li></ol></div><hr><h2 id="哈希算法"><a href="#哈希算法" class="headerlink" title="哈希算法"></a>哈希算法</h2><p>哈希函数的输入称为预图像或者消息，输出被称为哈希值或摘要。</p><p>哈希算法依据分组密码的思路，将原消息压缩和混淆。从而将任意长度的字符串映射为固定长度的比特串。</p><p>密码学中哈希函数是一类单向函数，由输入很容易得到输出，但是由输出则很难得到输入的信息。</p><p>哈希函数有以下五种主要的性质：</p><div class="note info"><ol><li>确定性：相同的消息总是得到相同的哈希值</li><li>高效性：任意给定的消息，哈希算法可以快速得到其哈希值</li><li>不可逆：有限时间类，由哈希值计算得到原消息是不可能的</li><li>雪崩性：原消息微小的改动即会导值所得到的哈希值得巨大差异</li><li>低碰撞：两个不同的消息得到同样的哈希值得概率是非常低的</li></ol></div><p>这些性质使得哈希函数在以太坊中有着广泛的应用包括数据签名，消息完整性验证，工作量证明，随机数生成等等。</p><p>目前通用的哈希算法有四代标准，SHA1有名的MD5，SHA2的 SHA256，SHA512算法，及以太坊中使用的SHA3标准的Keacck256算法。</p><hr><h1 id="账户地址的生成"><a href="#账户地址的生成" class="headerlink" title="账户地址的生成"></a>账户地址的生成</h1><p>以太坊通过椭圆曲线加密算法来实现对交易的签名与验证，路径<code>github.com/ethereum/go-ethereum/crypto/</code>下的代码包负责所有与加密相关的操作。</p><p>以太坊中的地址是使用单向hash函数Keacck-256从公钥或合约中派生出来的唯一标识符。</p><p>具体过程为：</p><div class="note info"><ol><li>由椭圆曲线加密算法中得到64bytes字符串公钥。</li><li>使用Keacck-256算法计算公钥的哈希值为32bytes。</li><li>保留最后的20bytes(大端表示)作为以太坊的地址。</li></ol></div><hr><h2 id="相关代码"><a href="#相关代码" class="headerlink" title="相关代码"></a>相关代码</h2><p>GO语言包中<code>crypto/ecdsa</code>包含了关于椭圆曲线的结构体声明和操作的函数，以太坊也是通过调用它来生成账户的私钥并产生公钥的。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> PublicKey <span class="keyword">struct</span> &#123;</span><br><span class="line">    elliptic.Curve</span><br><span class="line">    X, Y *big.Int</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> PrivateKey <span class="keyword">struct</span> &#123;</span><br><span class="line">    PublicKey</span><br><span class="line">D *big.Int</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>公钥<code>PublicKey</code>结构体,包含一个<code>elliptic.Curve</code>接口的实现体来提供椭圆曲线的所有属性和相关操作；公钥的成员<code>X,Y</code>即为生成的未压缩公钥。</p><p>私钥是以太坊账户中存储的唯一可以用来验证账户身份的信息，组合体<code>PrivateKey</code>有成员<code>PublicKey</code>，成员<code>D</code>是算法生成的私钥。</p><p>根据不同的用途可以使用结构体<code>PrivateKey</code>或成员<code>PrivateKey.D</code>。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">GenerateKey</span><span class="params">(c elliptic.Curve, rand io.Reader)</span> <span class="params">(*PrivateKey, error)</span></span></span><br></pre></td></tr></table></figure><p>密钥的生成是通过方法<code>GenerateKey()</code>,它返回私钥<code>PrivateKey</code>，私钥中包含成员<code>PublicKey</code>，可以生成账户地址。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ToECDSAPub</span><span class="params">(pub []<span class="keyword">byte</span>)</span> *<span class="title">ecdsa</span>.<span class="title">PublicKey</span></span> &#123;  </span><br><span class="line">    x, y := elliptic.Unmarshall(S256(), pub)  </span><br><span class="line">    <span class="keyword">return</span> &amp;ecdsa.PublicKey&#123;Curve:S256(), X:x, Y:y&#125;  </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">FromECDSAPub</span><span class="params">(pub *ecdsa.PublicKey)</span> []<span class="title">byte</span></span> &#123;  </span><br><span class="line">    <span class="keyword">return</span> elliptic.Marshall(S256(), pub.X, pub.Y)  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在生成地址之前，将结构体<code>ecdsa.PublicKey{}</code>转换为字符串类型的公钥。在<code>github.com/ethereum/go-ethereum/crypto/crypto.go</code>中定义了相关的转换函数<code>ToECDSAPub()</code>和<code>FromECDSAPub</code>。</p><p>这两个函数完成了big.int 类型到 []byte的转换，实际调用时注意返回的<code>[]byte</code>类型字符串是由三部分组成，第一部分为曲线参数，后两部分是公钥字面值。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> (  </span><br><span class="line">    HashLength = <span class="number">32</span>  </span><br><span class="line">    AddressLength = <span class="number">20</span>  </span><br><span class="line">)  </span><br><span class="line"><span class="keyword">type</span> Hash [HashLength]<span class="keyword">byte</span>  </span><br><span class="line"><span class="keyword">type</span> Address [AddressLength]<span class="keyword">byte</span></span><br></pre></td></tr></table></figure><p>以太坊在<code>github.com/ethereum/go-ethereum/common/types.go</code>中用两个自定义类型表示32bytes的hash值和20bytes的账户地址。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Keccak512</span><span class="params">(data ...[]<span class="keyword">byte</span>)</span> []<span class="title">byte</span> </span></span><br><span class="line"><span class="function"><span class="title">func</span> <span class="title">Keccak256Hash</span><span class="params">(data ...[]<span class="keyword">byte</span>)</span> <span class="params">(h common.Hash)</span></span></span><br></pre></td></tr></table></figure><p>由哈希算法Keccak256计算公钥的哈希值,以太坊在<code>github.com/ethereum/go-ethereum/crypto/crypto.go</code>中通过<code>Keccak512()</code>和<code>Keccak256Hash()</code>方法实现。</p><p>需要注意函数中的参数是公钥的字符串，通过格式转换函数得到的公钥字符串中<code>pubkey[0]</code>并不是公钥，只需传入<code>pubkey[1:]</code>来计算公钥的hash值。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">BytesToAddress</span><span class="params">(b []<span class="keyword">byte</span>)</span> <span class="title">Address</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> a Address</span><br><span class="line">a.SetBytes(b)</span><br><span class="line"><span class="keyword">return</span> a</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(a *Address)</span> <span class="title">SetBytes</span><span class="params">(b []<span class="keyword">byte</span>)</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(b) &gt; <span class="built_in">len</span>(a) &#123;</span><br><span class="line">b = b[<span class="built_in">len</span>(b)-AddressLength:]</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">copy</span>(a[AddressLength-<span class="built_in">len</span>(b):], b)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后，将大端表示的公钥哈希值最后的20bytes作为账户地址，由<code>github.com/ethereum/go-ethereum/common</code>中<code>BytesToAddress()</code>和<code>SetBytes()</code>方法实现。</p><p>这两个函数实际上是用来验证字符串是否满足账户地址的格式。</p><hr><h1 id="交易的签名"><a href="#交易的签名" class="headerlink" title="交易的签名"></a>交易的签名</h1><p>以太坊中,交易在被放进区块时要经过椭圆曲线签名算法进行数字签名。</p><p>对交易数字签名主要包含两部分:</p><div class="note info"><ol><li>使用私钥（签名秘钥）从交易信息中创建签名 </li><li>允许任何人使用交易信息和公钥验证签名       </li></ol></div><p>以太坊中交易进行签名主要有以下步骤：</p><div class="note info"><ol><li>创建交易，完整的交易数据结构包含: nonce, gasPrice, startGas, to, value, data, v, r, s。</li><li>由RLP编码将交易序列化。</li><li>通过Keaccak256计算交易的哈希值。</li><li>由账户私钥对交易哈希值签名。</li></ol></div><p>$Sig=F_{sig}(F_{keccak256}(m),sk), Sig = (R,S)$</p><hr><h2 id="相关代码-1"><a href="#相关代码-1" class="headerlink" title="相关代码"></a>相关代码</h2><p>在<code>github.com/ethereum/go-ethereum/core/types</code>中定义了交易的结构体类型，并且提供了新建交易的函数<code>NewTransaction()</code>。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Transaction <span class="keyword">struct</span> &#123;</span><br><span class="line">data txdata</span><br><span class="line"><span class="comment">// caches</span></span><br><span class="line">hash atomic.Value</span><br><span class="line">size atomic.Value</span><br><span class="line">from atomic.Value</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> txdata <span class="keyword">struct</span> &#123;</span><br><span class="line">AccountNonce <span class="keyword">uint64</span>          </span><br><span class="line">Price        *big.Int        </span><br><span class="line">GasLimit     <span class="keyword">uint64</span>          </span><br><span class="line">Recipient    *common.Address </span><br><span class="line">Amount       *big.Int        </span><br><span class="line">Payload      []<span class="keyword">byte</span>         </span><br><span class="line"><span class="comment">// 签名值</span></span><br><span class="line">V *big.Int</span><br><span class="line">R *big.Int</span><br><span class="line">S *big.Int</span><br><span class="line">Hash *common.Hash</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewTransaction</span><span class="params">(nonce <span class="keyword">uint64</span>, to common.Address, amount *big.Int, gasLimit <span class="keyword">uint64</span>, gasPrice *big.Int, data []<span class="keyword">byte</span>)</span> *<span class="title">Transaction</span></span></span><br></pre></td></tr></table></figure><p>完整的交易必须包含有转入方地址<code>Recipient</code>，转账金额<code>AccountNonce</code>，每个交易独立的<code>gasprice</code>和<code>gaslimit</code>，签名<code>V,R,S</code>初始为0。</p><p>以太坊在<code>github.com/ethereum/go-ethereum/rlp</code>设计了rlp编码的规则，定义了与rlp编码有关的函数。</p><p>在对交易序列化的过程中实际上是完成types.Transaction{}结构体到[]byte类型的转换。</p><p>由哈希算法Keccak256得到交易的哈希值后，调用椭圆曲线签名算法，进行签名。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Sign</span><span class="params">(msg []<span class="keyword">byte</span>, seckey []<span class="keyword">byte</span>)</span> <span class="params">([]<span class="keyword">byte</span>, error)</span></span> &#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以太坊对bitcoin的secp256k1 C库进行了封装，在<code>github.com/ethereum/go-ethereum/crypto/secp256k1</code>中定义了签名函数<code>Sign()</code>,需要传入私钥和被签名信息。</p><p>最后，由<code>*big.Int</code>类型成员<code>R，S，V</code>来存放64bytes签名。<code>R</code>和<code>S</code>分别存放32bytes，<br><code>V</code>1bytes使恢复公钥时加速运算。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">SignTx</span><span class="params">(tx *Transaction, s Signer, prv *ecdsa.PrivateKey)</span> <span class="params">(*Transaction, error)</span></span> &#123;  </span><br><span class="line">    h := s.Hash(tx)  </span><br><span class="line">    sig, err := crypto.Sign(h[:], prv)  </span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;  </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span>, err  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">return</span> tx.WithSignature(s, sig)  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以太坊也在github.com/ethereum/go-ethereum/core/types/transaction_signing.go中定义了直接生成交易的数字签名的函数<code>SignTx()</code>函数。</p><hr><h1 id="交易签名的验证"><a href="#交易签名的验证" class="headerlink" title="交易签名的验证"></a>交易签名的验证</h1><p>签名的验证，证明只有生成该签名的私钥所有者才能在该交易上产生这个签名。</p><p>验证签名时，需要有签名<code>R</code>，<code>S</code>它们包含在交易之中。</p><p>签名验证主要步骤：</p><div class="note info"><ol><li>由交易的hash值和签名得到账户公钥。</li><li>使用公钥和签名通过椭圆曲线加密算法对交易进行验证。</li></ol></div><hr><h2 id="相关代码-2"><a href="#相关代码-2" class="headerlink" title="相关代码"></a>相关代码</h2><p>以太坊对bitcoin的secp256k1 C库进行了封装，在<code>github.com/ethereum/go-ethereum/crypto/secp256k1</code>,定义了恢复公钥的函数<code>RecoverPubkey（）</code>和验证签名的函数<code>VerifySignature（）</code>。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">RecoverPubkey</span><span class="params">(msg []<span class="keyword">byte</span>, sig []<span class="keyword">byte</span>)</span> <span class="params">([]<span class="keyword">byte</span>, error)</span></span> &#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>VerifySignature()</code>用来验证对应公钥的签名，传入对应交易的签名<code>R，S</code>。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">VerifySignature</span><span class="params">(pubkey, msg, signature []<span class="keyword">byte</span>)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(msg) != <span class="number">32</span> || <span class="built_in">len</span>(signature) != <span class="number">64</span> || <span class="built_in">len</span>(pubkey) == <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line">sigdata := (*C.uchar)(unsafe.Pointer(&amp;signature[<span class="number">0</span>]))</span><br><span class="line">msgdata := (*C.uchar)(unsafe.Pointer(&amp;msg[<span class="number">0</span>]))</span><br><span class="line">keydata := (*C.uchar)(unsafe.Pointer(&amp;pubkey[<span class="number">0</span>]))</span><br><span class="line"><span class="keyword">return</span> C.secp256k1_ext_ecdsa_verify(context, sigdata, msgdata, keydata, C.size_t(<span class="built_in">len</span>(pubkey))) != <span class="number">0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以太坊中也在<code>github.com/ethereum/go-ethereum/crypto</code>中定义了直接验证交易数字签名的函数<code>ValidateSignatureValues</code>，本质上是对上面的两个函数的封装。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ValidateSignatureValues</span><span class="params">(v <span class="keyword">byte</span>, r, s *big.Int, homestead <span class="keyword">bool</span>)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> r.Cmp(common.Big1) &lt; <span class="number">0</span> || s.Cmp(common.Big1) &lt; <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> homestead &amp;&amp; s.Cmp(secp256k1halfN) &gt; <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> r.Cmp(secp256k1N) &lt; <span class="number">0</span> &amp;&amp; s.Cmp(secp256k1N) &lt; <span class="number">0</span> &amp;&amp; (v == <span class="number">0</span> || v == <span class="number">1</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;以太坊账户地址&quot;&gt;&lt;a href=&quot;#以太坊账户地址&quot; class=&quot;headerlink&quot; title=&quot;以太坊账户地址&quot;&gt;&lt;/a&gt;以太坊账户地址&lt;/h1&gt;&lt;p&gt;以太坊有两种不同的账户类型:&lt;/p&gt;
&lt;div class=&quot;note info&quot;&gt;&lt;ol&gt;
&lt;li
      
    
    </summary>
    
      <category term="以太坊" scheme="http://ldlovezyh.cn/categories/%E4%BB%A5%E5%A4%AA%E5%9D%8A/"/>
    
    
      <category term="椭圆曲线加密" scheme="http://ldlovezyh.cn/tags/%E6%A4%AD%E5%9C%86%E6%9B%B2%E7%BA%BF%E5%8A%A0%E5%AF%86/"/>
    
      <category term="以太坊" scheme="http://ldlovezyh.cn/tags/%E4%BB%A5%E5%A4%AA%E5%9D%8A/"/>
    
      <category term="GO" scheme="http://ldlovezyh.cn/tags/GO/"/>
    
  </entry>
  
  <entry>
    <title>最美是清欢</title>
    <link href="http://ldlovezyh.cn/2018/07/21/%E6%9C%80%E7%BE%8E%E6%98%AF%E6%B8%85%E6%AC%A2/"/>
    <id>http://ldlovezyh.cn/2018/07/21/最美是清欢/</id>
    <published>2018-07-21T12:13:13.931Z</published>
    <updated>2018-07-21T12:13:13.931Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center"><p>Lorna </p></blockquote><p>&emsp;&emsp;我一直很喜欢林清玄先生的散文。</p><p>&emsp;&emsp;也许是尚不谙世事的缘故，我总是喜欢看些辞藻华丽的文章，直到遇见林清玄先生的散文，我几乎是一眼就喜欢上了他。他行文并不爱用太多优美的字句，只是两三笔渲染下去，文章便忽地有了神采，有了气韵。他文章真真是字字珠玑，内容不太浅显，似乎句句都含着深意，教人回味无穷，他那不沾人间烟火气息的文字，就这样流进了我干涸的原野。看了许多他的著作，我最喜欢的还是那篇《人间有味是清欢》。</p><p>&emsp;&emsp;题目源于苏轼的一句词。林清玄先生钟爱这句词，围绕着“清欢”二字，作了许多他个人的理解。在这里我也想同大家谈谈我的拙解。</p><p>&emsp;&emsp;清欢，即人间最清雅，最清澈的欢愉。这个世界太忙碌，太浮躁了。大家都忙着工作，忙着挣钱养家糊口，谁肯静下心来，观星辰，闻虫语，在芳草地上做场短梦呢？我只是痛惜，人们为何不懂得“人生只似风前柳絮，欢也零星，悲也零星，都作连江点点萍”？人啊，就这一生，如果只将这一生庸碌地献给工作，献给金钱，哪里还有献给自己的东西呢？</p><p>&emsp;&emsp;我所言，并不是让人们去逃避一切，归隐山林。我只是想说，当你疲惫之时，可不可以放下手机，稍微让自己休息一会，品一口茗，读一本小书，放眼望一望大自然？世界多美好呀，可惜住在其中的人不懂得它的美丽。追求并不是人生的全部，谁见过人蓄养凤凰呢？谁能束缚月光呢？一颗流星有它来去的方向，我自由我的去处。</p><p>&emsp;&emsp;我其实很喜欢苏轼的处世态度。他在《定风波》中言：“何妨吟啸且徐行”“竹杖芒鞋轻胜马，谁怕？一蓑烟雨任平生”阐述了他“宁静的生活态度”。他本人是个有闲情雅致的人。约上三两好友，纵情喝酒吃肉，谈天说地，趁兴归家，写下“人间有味是清欢”的句子真是妙极！</p><p>&emsp;&emsp;这样的生活，很多人心驰神往，要实现也很简单，在周末时空出时间，来到山里或大海边。听听松涛的声音，浪花卷上岸来，也别有一番风味。</p><p>&emsp;&emsp;毋须多言，“清欢”的美丽并不需要人人皆知，了解它的人，在精神的高地兀自风雅。</p><p><img src="http://chuantu.biz/t6/341/1531410730x-1566638093.png" alt="enter description here"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;p&gt;Lorna &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;我一直很喜欢林清玄先生的散文。&lt;/p&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;也许是尚不谙世事的缘故，我总是喜欢看些辞藻华丽的
      
    
    </summary>
    
      <category term="专栏" scheme="http://ldlovezyh.cn/categories/%E4%B8%93%E6%A0%8F/"/>
    
    
      <category term="文章" scheme="http://ldlovezyh.cn/tags/%E6%96%87%E7%AB%A0/"/>
    
  </entry>
  
  <entry>
    <title>台阶</title>
    <link href="http://ldlovezyh.cn/2018/07/21/%E5%8F%B0%E9%98%B6/"/>
    <id>http://ldlovezyh.cn/2018/07/21/台阶/</id>
    <published>2018-07-21T12:10:03.822Z</published>
    <updated>2018-07-21T12:10:03.822Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center"><p>Lorna</p></blockquote><p>&emsp;&emsp;我父母是我成长,求学的台阶。</p><p>&emsp;&emsp;我一直觉得,我是踩着父母的肩膀，就像爬台阶一样，一步一步往上爬。自我出生起，我从牙牙学语到如今的口齿伶俐，我从蹒跚学步到如今的健步如飞，我从一个顽劣的幼童到如今的亭亭少女，是，我在成长。在成长中倍感喜悦的我回头望了望我父母。父母从原来的强壮到如今饱经风霜，略显苍老之态。母亲原来青春靓丽到如今——头发上已冒出了星星点点的银丝。她这样爱美的一个人，选择悄悄拔下白头发，勉力对我露出笑颜。看到这一幕，我愣了。我在成长，我父母却日渐衰老。难道我是在吸取他们身体的养分成长，就像故事中的妖一般？我惶恐地想着。这个问题始终得不到解答。我心中的猜想，就此生了根发了芽。</p><p>&emsp;&emsp;我不是一个很聪明的人。很多时候，我迟钝，愚笨。谁会想承认自己笨呢？我也不例外。我就努力地学，像一朵不起眼的小花，我想和艳丽的玫瑰比个高下。一次考试之后，我内心不是那么坚定了。数学试卷的最后一题，我一如既往的做不出来。考完试后，大家舒了口气叽叽喳喳地讨论着，“这次数学好简单呀！”“是啊，太简单了。”在旁的我有些愕然。简单？试卷发下来之后，开始意识到，原来，不是努力就比得上天赋的，丑小鸭永远都是丑小鸭，它会变成天鹅只是因为它本就是天鹅。我心里难受极了。回家就控制不住了，看见父母，“哇”地一下就哭出了声。听完我的解释，他们有些沉默。晚上，隔壁卧室依稀传来声音。我只模模糊糊地听见“哭”“怎么办”“安慰”几个字眼。早上起床，摆在我面前的是丰盛的早餐。父母的关心带着些迟疑和小心翼翼。他们告诉我，只是一次考试，算不了什么。父母都不是擅言辞的人。他们在变老，而我无法为他们分忧反倒带来问题。我一面愧疚，一面坚定了好好学习的决心。</p><p>&emsp;&emsp;可我想问出一个问题，这台阶，我能不踩了吗？我于心不忍。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;p&gt;Lorna&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;我父母是我成长,求学的台阶。&lt;/p&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;我一直觉得,我是踩着父母的肩膀，就像爬台阶一样，一步
      
    
    </summary>
    
      <category term="专栏" scheme="http://ldlovezyh.cn/categories/%E4%B8%93%E6%A0%8F/"/>
    
    
      <category term="文章" scheme="http://ldlovezyh.cn/tags/%E6%96%87%E7%AB%A0/"/>
    
  </entry>
  
  <entry>
    <title>随笔</title>
    <link href="http://ldlovezyh.cn/2018/07/12/%E9%9A%8F%E7%AC%94/"/>
    <id>http://ldlovezyh.cn/2018/07/12/随笔/</id>
    <published>2018-07-12T13:59:35.139Z</published>
    <updated>2018-07-12T13:59:26.923Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center"><p>Lorna </p></blockquote><p>&emsp;&emsp;雨忽然停了，窗外传来鸟儿清脆的鸣叫，空气清新极了，雨后的一切都是湿漉漉的，朦胧之中，好像看见一只小兔子跌跌撞撞地从草丛中跑过来，对我打声招呼：“早啊！”然后迈着欢快的步子继续前进。也只有在这一刻，才能感受到：生活真美好啊。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;p&gt;Lorna &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;雨忽然停了，窗外传来鸟儿清脆的鸣叫，空气清新极了，雨后的一切都是湿漉漉的，朦胧之中，好像看见一只小兔子跌跌撞撞地从草丛
      
    
    </summary>
    
      <category term="专栏" scheme="http://ldlovezyh.cn/categories/%E4%B8%93%E6%A0%8F/"/>
    
    
      <category term="文章" scheme="http://ldlovezyh.cn/tags/%E6%96%87%E7%AB%A0/"/>
    
  </entry>
  
  <entry>
    <title>青春的意义</title>
    <link href="http://ldlovezyh.cn/2018/07/11/%E9%9D%92%E6%98%A5%E7%9A%84%E6%84%8F%E4%B9%89/"/>
    <id>http://ldlovezyh.cn/2018/07/11/青春的意义/</id>
    <published>2018-07-11T15:20:14.048Z</published>
    <updated>2018-07-11T15:20:14.048Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center"><p>他突然懂得了青春的含义，不就是那花糕吗？</p><p>Lorna</p></blockquote><p>谈起“青春”二字，很多人不免热血沸腾。正处于青春期的少年们，总苦苦思考着，青春，到底是个什么呢？</p><p>孩子们谈起青春，总带着一股子向往，青春？听着是个新鲜词，正值盛夏，街道里种着延伸着的许多棵安静的树。树影晃动成的海洋，朝大地的尽头倾斜着，那是——滚滚而去的绿色巨浪。九岁的阿强用手支着脑袋，坐在小院里的石凳上，大人总说他小小的脑袋里装着无数奇妙的幻想，当然了，这是书面一些说，实际上就是天天没个正经，总喜欢胡思乱想。阿强才不听的，大人也懂小孩子么？青春？想必很自由吧，那时候我长大了，是一个有自己思想的小大人了，再也不会像现在一样不被妈妈尊重了，街坊邻居们也再不会叫我“爱胡思乱想的阿强”了，他们，他们应该叫我什么呢？嗯， “长大的阿强”？“成熟的阿强”？ “懂事的阿强”？阿强这样痴痴地想着。青春，在这时对他来讲，是一块软糯的花糕，上面撒满了蜜糖，一口下去，软软和和的，甜甜的，像棉花糖一样梦幻，这都是他想象出的。他还从未吃过这东西呢。他上回看邻村的铁柱吃这东西，香得他跟着铁柱一口气追了三里地，最后也还是没有吃到，他不禁有些惋惜。</p><p>花开了五季，又落了五季。阿强长大了，已出落成一个 14 岁的翩翩少年了，上了初中，也不如以前轻松了。小学考试随便考，成绩谁也不知道。初中几乎每周都有考试，考的好不好，成绩表贴在墙上，一目了然。阿强不愿意丢脸，他前头，坐着整个班——就是整个学校，也最最耀眼的女孩子。他看着她，微微晃动的发辫。他不自觉地发起呆。那是一种对强者的崇拜吧——那时的他，并不懂得什么叫做喜欢——他只是单纯的觉得，她太强了，让他不想被她小看。可是由于阿强基础差，初中的内容让他感到迷迷糊糊。青春期的阿强在这时并没有感到欣喜，而是每天都为这作业、这考试而感到心烦意乱。除此之外，令他稍稍感到快乐的，就是篮球了，篮球场上，他全身的细胞都在叫嚣，他想要释放自己，在篮球上，他找到了快乐。他正抱着篮球在回家的路上走着，心里想着加入校篮球队的事，在往上，就可以在市里比赛了。路上有两棵杨柳，正抽着胶质的金丝叶，黄昏的天寥廓，粉色的云霞浮在上头。年轻人的天是没有边的，年轻人的心飞到远处去。他最终也吃了那花糕，但不如想象中那般美味。</p><p>阿强的青春期结束了，无数日夜的挑灯夜读，无数道精心批注的题目，无数篇背过的文章，高考完之后，都被忘记了，再后来，阿强长成了大强，毕业了，也工作了，已经坐在办公室的他，再想起青春，也只是付之一笑。管它呢？都过去了。只是在同学聚会上，大家相约回到母校，大强发现，青春真好啊。在他脑内，关于青春的记忆一下子复苏了。是了，青春，他曾用过这宝贵年华用功学习。他有些后悔，一些资料早被他撕了。青春，他曾在球场上挥洒汗水，那些被用坏的球鞋，都是他曾度过青春的证明。他一时感慨万千，心里千愁万绪，一下不知该如何倾吐。</p><p>他突然懂得了青春的含义，不就是那花糕吗？没吃过时，总巴巴地想着，吃了后，对它期望值太高，虽也好吃，总不如那小时美妙的想象。吃过之后，又升起无限回味。青春？这就是青春啊。这，才是他一直疑惑不解的青春啊。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;p&gt;他突然懂得了青春的含义，不就是那花糕吗？&lt;/p&gt;
&lt;p&gt;Lorna&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;谈起“青春”二字，很多人不免热血沸腾。正处于青春期的少年们，总苦苦思考着，青春，到底是个
      
    
    </summary>
    
      <category term="专栏" scheme="http://ldlovezyh.cn/categories/%E4%B8%93%E6%A0%8F/"/>
    
    
      <category term="文章" scheme="http://ldlovezyh.cn/tags/%E6%96%87%E7%AB%A0/"/>
    
  </entry>
  
  <entry>
    <title>小妖狐的故事</title>
    <link href="http://ldlovezyh.cn/2018/07/11/%E5%B0%8F%E5%A6%96%E7%8B%90%E7%9A%84%E6%95%85%E4%BA%8B/"/>
    <id>http://ldlovezyh.cn/2018/07/11/小妖狐的故事/</id>
    <published>2018-07-11T15:18:01.154Z</published>
    <updated>2018-07-11T15:17:54.862Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center"><p>没有开始与结束，不过是一场风月的故事。</p><p>Lorna</p></blockquote><p>有只可爱的小妖狐，天天都要来树林里泡“日光浴”。它说阳光让它感到幸福。</p><p>公主有次来树林玩时，看见了小妖狐，觉得新奇，上去搭讪。</p><p>一来二去，他们渐渐熟了。经常在一起玩。</p><p>侍卫很费解。怎么公主最近老是要去王宫东面的树林里玩？说是去要抓小鱼。树林里哪来的鱼？</p><p>公主双手叉腰：“本公主的话你敢不信？”</p><p>侍卫连说：“不敢不敢。”</p><p>公主又跑去树林，去找她心心念念的小妖狐。</p><p>一天，小妖狐一脸惆怅地说：“我以后怕是不能和你一起玩了。我们狐族有规矩，凡是满了十二岁的狐，都要回狐族去，饮下忘川水，做一只崭新的狐。”</p><p>公主说：“你一定要记得我啊！我以后是要嫁给你的！”</p><p>妖狐最近很烦。</p><p>山里老是来一些奇奇怪怪的人，自称自己是骑士，说如果活捉了它，就能娶到公主。</p><p>妖狐一脚踹飞他们，“滚啊！我一不吃人二不作恶，我只想安安静静地呆在山里，我有什么错，连我的这点权利都要剥夺！”</p><p>终于，在妖狐踹飞第10001个骑士之后，来了一个女骑士。</p><p>女骑士穿着可爱的有着花边的小裙子，穿着小皮鞋，与形象不符的是，她拿着一把生锈的刀。</p><p>妖狐挑眉：“怎么？你也想娶公主？”</p><p>“不，我是来取你的心的。”</p><p>妖狐大惊失色，“怎么现在的人这么变态，连狐心都要？”</p><p>女骑士甩掉刀，扑到妖狐身上，“我来履行承诺，来嫁给你啦！”</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;p&gt;没有开始与结束，不过是一场风月的故事。&lt;/p&gt;
&lt;p&gt;Lorna&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;有只可爱的小妖狐，天天都要来树林里泡“日光浴”。它说阳光让它感到幸福。&lt;/p&gt;
&lt;p&gt;公主
      
    
    </summary>
    
      <category term="专栏" scheme="http://ldlovezyh.cn/categories/%E4%B8%93%E6%A0%8F/"/>
    
    
      <category term="文章" scheme="http://ldlovezyh.cn/tags/%E6%96%87%E7%AB%A0/"/>
    
      <category term="童话" scheme="http://ldlovezyh.cn/tags/%E7%AB%A5%E8%AF%9D/"/>
    
  </entry>
  
</feed>
